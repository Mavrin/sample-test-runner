(function(window) {
    var createMochaStartFn = function (tc) {
        return function (config) {
            var runner = basis.require('./c.js');
            var rootTest = basis.require("./h.js").create({
                name: 'Test suite',
                test: [
                    {
                        name: 'Test #1',
                        test: function () {
                            assert(false)
                        }
                    },
                    {
                        name: 'Test #2',
                        test: function () {
                            assert(true)
                        }
                    }
                ]
            });
            basis.require("./j.js").baseURI = 'base/node_modules/karma-basisjs-test-runner/lib';
            runner.loadTests(rootTest.childNodes);
            runner.faultTests.addHandler({
                change: function (sender) {
                    console.log(sender)
                }
            });
            runner.faultTests.addHandler({
                itemsChanged: function (sender, changed) {
                    var result = {
                        id: '',
                        description: changed.inserted[0].data.name,
                        suite: [],
                        success: false,
                        skipped: false,
                        time: 0,
                        log: ['fail']
                    };
                    tc.result(result);
                }
            });
            var total = runner.count.total.value;

            runner.count.done.addHandler({
                change: function (sender) {
                    if (sender.value === total) {
                        tc.complete({
                            coverage: window.__coverage__
                        });
                    }
                }
            });

            tc.info({total: total});
            runner.run();


            /*runner.on('test', function (test) {
             test.$errors = [];
             });

             runner.on('fail', function (test, error) {
             if ('hook' === test.type) {
             test.$errors = [formatError(error)];
             runner.emit('test end', test);
             } else {
             test.$errors.push(formatError(error));
             }
             });

             runner.on('test end', function (test) {
             var skipped = test.pending === true;

             var result = {
             id: '',
             description: test.title,
             suite: [],
             success: test.state === 'passed',
             skipped: skipped,
             time: skipped ? 0 : test.duration,
             log: test.$errors || []
             };

             var pointer = test.parent;
             while (!pointer.root) {
             result.suite.unshift(pointer.title);
             pointer = pointer.parent;
             }

             tc.result(result);
             });*/
        };
    };


// Pass options from client.mocha to mocha
    var createConfigObject = function (karma) {
        if (!karma.config || !karma.config.mocha) {
            return mochaConfig;
        }

        // Copy all properties to mochaConfig
        for (var key in karma.config.mocha) {

            // except for reporter
            if (key === 'reporter') {
                continue;
            }

            // and merge the globals if they exist.
            if (key === 'globals') {
                mochaConfig.globals = mochaConfig.globals.concat(karma.config.mocha[key]);
                continue;
            }

            mochaConfig[key] = karma.config.mocha[key];
        }
        return mochaConfig;
    };
    debugger

    window.__karma__.start = createMochaStartFn(window.__karma__);

}(window))